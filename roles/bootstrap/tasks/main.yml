- name: create docker group
  group:
    name: docker
    state: present
- name: create service user for server
  user:
    name: "{{ media_server_user }}"
    groups: docker
#Install docker as well?
- name: make sure docker service is started and enabled
  systemd:
    name: docker
    state: started
    enabled: yes
- name: install supervisord
  pip:
    name: supervisor
- name: install libselinux-python
  dnf:
    name: libselinux-python
    state: latest
- name: generate supervisord template file
  tags:
    - plex
  template:
    src: templates/supervisord.conf.j2
    dest: /etc/supervisord.conf
- name: create log file directory
  file:
    path: /var/log/supervisord/
    owner: root
    state: directory
- name: create supervisord init scripts
  tags:
    - supervisord
  template:
    src: templates/supervisord.service.j2
    dest: /usr/lib/systemd/system/supervisord.service
- name: start supervisord
  tags:
    - supervisord
  systemd:
    name: supervisord
    state: started
    enabled: yes
  #command: supervisord
- name: create home-assistant persistent folder
  tags:
    - home-assistant
  file:
    path: "{{ home_assistant_folder }}"
    state: directory
    owner: "{{ media_server_user }}"
    group: "{{ media_server_user }}"
- name: generate docker-compose
  tags:
    - dockercompose
  template:
    src: templates/docker-compose.yaml.j2
    dest: "{{ home_assistant_folder }}/docker-compose.yaml"
- name: restart supervisorctl
  tags: 
    - home-assistant
  supervisorctl:
    name: home-assistant
    state: restarted
#reverse proxy
- name: install nginx
  tags:
    - reverse-proxy
  dnf:
    name: nginx
    state: latest
- name: enable nginx
  tags:
    - reverse-proxy
  systemd:
    name: nginx
    state: started
    enabled: yes
- name: nginx config file
  tags:
    - reverse-proxy
  template:
    src: templates/nginx.conf.j2
    dest: /etc/nginx/nginx.conf
- name: enable selinux reverse proxy
  tags:
    - reverse-proxy
  command: "setsebool -P httpd_can_network_connect 1"
- name: restart nginx
  tags:
    - reverse-proxy
  systemd:
    name: nginx
    state: restarted
- name: firewall http port
  tags:
    - reverse-proxy
  command: firewall-cmd --add-port=80/tcp --permanent
- name: firewall https port
  tags:
    - reverse-proxy
  command: firewall-cmd --add-port=443/tcp --permanent
- name: firewall ssh port
  tags:
    - reverse-proxy
  command: firewall-cmd --add-port=22/tcp --permanent
- name: reload firewalld
  tags:
    - reverse-proxy
  command: firewall-cmd --reload
#Set up port forwarding and duckdns manually
#After that set up certbot for letsencrypt
- name: install certbot-nginx
  tags:
    - lets-encrypt
  dnf:
    name: certbot-nginx
    state: latest
#Has interactive part. needs to be run manually
#- name: configure certbot
#  tags:
#    - lets-encrypt
#  command: "certbot --nginx -m {{ email }}"
#  SSH parts as well. Template ssh file and enable service?
- name: sshd config file
  tags:
    - ssh
  template:
    src: templates/sshd_config.j2
    dest: /etc/ssh/sshd_config
- name: enable sshd
  tags: 
    - ssh
  systemd:
    name: sshd
    state: started
    enabled: yes
# Plex stuff. Create folders, supervisord stuff
- name: create plex root folder
  tags:
    - plex
  file:
    path: "{{ plex_folder }}"
    state: directory
    owner: "{{ media_server_user }}"
    group: "{{ media_server_user }}"
- name: create plex transcode folder
  tags:
    - plex
  file:
    path: "{{ plex_transcode_folder }}"
    state: directory
    owner: "{{ media_server_user }}"
    group: "{{ media_server_user }}"
- name: create plex config folder
  tags:
    - plex
  file:
    path: "{{ plex_config_folder }}"
    state: directory
    owner: "{{ media_server_user }}"
    group: "{{ media_server_user }}"
#appdaemon
- name: create appdaemon config folder
  tags:
    - appdaemon 
  file:
    path: "{{ appdaemon_config_folder }}"
    state: directory
    owner: "{{ media_server_user }}"
    group: "{{ media_server_user }}"

